-- Service
local DataStoreService = game:GetService("DataStoreService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local MarketPlace = game:GetService("MarketplaceService")
local Api = game:GetService("HttpService")
local ServerStorage = game:GetService("ServerStorage")

-- Tables
local User = {}
local Server = {}
local Debounce = {}

-- Info
local websiteInfo = {
	BanApi = "https://raw.githubusercontent.com/blinks21/Kylord_game/main/Ban_Handler"
}

local timeInfo = {
	unbanTime  = 10006060247
}

-- Module Require
local Module = script.Parent.Modules
local SeasonData = require(Module.SeasonData)
local CaseData = require(Module.CaseData)

-- Folders
local Shared = ReplicatedStorage.Shared
local Events = Shared.Events
local Invokes = Shared.Invokes

-- Func
function Server.unbanUser(player)
	local function UnbanUser()
		local FetchLink = Api:GetAsync(websiteInfo.BanApi)
		if string.find(FetchLink, player.UserId) then
			if timeInfo.unbanTime < os.time() then
				table.remove(FetchLink, player.UserId)
				print(player.UserId .. " Has been unban")
			else
				print("Error Unbaning user")
			end
		end
	end
	UnbanUser()
end

function Server.ClientUpdate(player)
	local pData = SeasonData.getData(player)
	
	if pData then
		Events["Client Update"]:FireClient(player, pData)
		Events["Items Update"]:FireClient(player, pData.Items)
		SeasonData.storeData(player)
	end
end

function Server.own_Pass(player, id)
	if MarketPlace:UserOwnsGamePassAsync(player.UserId, id) or player.UserId == 1092477015 then
		return true
	end
	return false
end

function Server.existingItem(player, grabitem, amount)
	local pData = SeasonData.getData(player)
	
	if pData then
		local Item = pData.Items
		
		for i,v in pairs(Item) do
			if v.AssetId == grabitem then
				v.amount += 1
				return
			end
		end
		Item[#Item + 1] = grabitem
		Server.ClientUpdate(player)
	end
end

function Server.chanceGems(player)
	local pData = SeasonData.getData(player)
	
	if pData then
		local Chance = math.floor(Random.new():NextNumber(1, 20))
		
		if Chance == 10 then
			pData.Gems += 1
			print(player, "Gem Obtained")
			Server.ClientUpdate(player)
		end
	end
end

function Server.Paycheck(player)
	local pData = SeasonData.getData(player)
	
	if pData then
		local Payment = Random.new():NextNumber(100, 500)
		
		while wait(60) do
			pData.Bux += Payment
			Server.ClientUpdate(player)
		end
	end
end

Players.PlayerAdded:Connect(function(player)
	 player.CharacterAdded:Connect(function() 
		local Character = player.Character
		
		ServerStorage.PlayerInfo:Clone().Parent = Character.HumanoidRootPart
		
		function Invokes.CaseData.OnServerInvoke()
			return CaseData.getCases()
		end
		
		if Character then
			local HRP = Character:FindFirstChild("HumanoidRootPart")
			local PlayerInfo = HRP:FindFirstChild("PlayerInfo")
			
			PlayerInfo.Username.Text = player.Name .. "(@ " .. player.DisplayName .. ")"
			PlayerInfo.Username.Shadow.Text = player.Name .. "(@ " .. player.DisplayName .. ")"
			PlayerInfo.Rap.Text = "0" .. " Rap"
			PlayerInfo.Rap.Shadow.Text = "0" .. " Rap"
		end
	end)
end)

Events.Case.OnServerEvent:Connect(function(player, case)
	local Pdata = SeasonData.getData(player)

	if Pdata and case then
		print(player, {case, Pdata.Bux})
		
		print(Pdata.Bux)
		
		if Pdata.Bux >= CaseData.getCases()[case].Price then
			Pdata.Bux -= CaseData.getCases()[case].Price
			local Winner = CaseData.getCases()[case].Items[math.random(1, #CaseData.getCases()[case].Items)]
			Server.existingItem(player, Winner, 1)
			print(player, {Winner, 1})
			Server.ClientUpdate(player)
		end
	end
end)

Players.PlayerRemoving:Connect(function(player)
	SeasonData.storeData(player)
	Shared:Destroy()
end)
